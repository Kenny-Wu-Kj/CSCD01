{
  "openapi": "3.1.0",
  "info": {
    "title": "LangGraph",
    "version": "0.1.0"
  },
  "paths": {
    "/assistants": {
      "post": {
        "tags": [
          "assistants/create"
        ],
        "summary": "Create Assistant",
        "description": "Create an assistant.",
        "operationId": "create_assistant_assistants_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssistantCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/assistants/search": {
      "post": {
        "tags": [
          "assistants/manage"
        ],
        "summary": "Search Assistants",
        "description": "List assistants.",
        "operationId": "search_assistants_assistants_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Assistant"
                  },
                  "type": "array",
                  "title": "Response Search Assistants Assistants Search Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/assistants/{assistant_id}": {
      "get": {
        "tags": [
          "assistants/manage"
        ],
        "summary": "Get Assistant",
        "description": "Get an assistant by ID.",
        "operationId": "get_assistant_assistants__assistant_id__get",
        "parameters": [
          {
            "description": "The ID of the assistant.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Assistant Id",
              "description": "The ID of the assistant."
            },
            "name": "assistant_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "assistants/manage"
        ],
        "summary": "Upsert Assistant",
        "description": "Create or update an assistant.",
        "operationId": "upsert_assistant_assistants__assistant_id__put",
        "parameters": [
          {
            "description": "The ID of the assistant.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Assistant Id",
              "description": "The ID of the assistant."
            },
            "name": "assistant_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssistantCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/assistants/{assistant_id}/graph": {
      "get": {
        "tags": [
          "assistants/manage"
        ],
        "summary": "Get Assistant Graph",
        "description": "Get an assistant by ID.",
        "operationId": "get_assistant_graph_assistants__assistant_id__graph_get",
        "parameters": [
          {
            "description": "The ID of the assistant.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Assistant Id",
              "description": "The ID of the assistant."
            },
            "name": "assistant_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "type": "object",
                  "title": "Response Get Assistant Graph Assistants  Assistant Id  Graph Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/assistants/{assistant_id}/schemas": {
      "get": {
        "tags": [
          "assistants/manage"
        ],
        "summary": "Get Assistant Schemas",
        "description": "Get an assistant by ID.",
        "operationId": "get_assistant_schemas_assistants__assistant_id__schemas_get",
        "parameters": [
          {
            "description": "The ID of the assistant.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Assistant Id",
              "description": "The ID of the assistant."
            },
            "name": "assistant_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/threads": {
      "post": {
        "tags": [
          "threads/create"
        ],
        "summary": "Create Thread",
        "description": "Create a thread.",
        "operationId": "create_thread_threads_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreadCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Thread"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/threads/search": {
      "post": {
        "tags": [
          "threads/manage"
        ],
        "summary": "Search Threads",
        "description": "List threads.",
        "operationId": "search_threads_threads_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Thread"
                  },
                  "type": "array",
                  "title": "Response Search Threads Threads Search Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/state": {
      "get": {
        "tags": [
          "threads/state"
        ],
        "summary": "Get Thread State",
        "description": "Get state for a thread.",
        "operationId": "get_thread_state_threads__thread_id__state_get",
        "parameters": [
          {
            "description": "The ID of the thread.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id",
              "description": "The ID of the thread."
            },
            "name": "thread_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadState"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "threads/state"
        ],
        "summary": "Add Thread State",
        "description": "Add state to a thread.",
        "operationId": "add_thread_state_threads__thread_id__state_post",
        "parameters": [
          {
            "description": "The ID of the thread.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id",
              "description": "The ID of the thread."
            },
            "name": "thread_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreadStateUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Config"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/history": {
      "get": {
        "tags": [
          "threads/state"
        ],
        "summary": "Get Thread History",
        "description": "Get all past states for a thread.",
        "operationId": "get_thread_history_threads__thread_id__history_get",
        "parameters": [
          {
            "description": "The ID of the thread.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id",
              "description": "The ID of the thread."
            },
            "name": "thread_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Limit",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ThreadState"
                  },
                  "type": "array",
                  "title": "Response Get Thread History Threads  Thread Id  History Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}": {
      "get": {
        "tags": [
          "threads/manage"
        ],
        "summary": "Get Thread",
        "description": "Get a thread by ID.",
        "operationId": "get_thread_threads__thread_id__get",
        "parameters": [
          {
            "description": "The ID of the thread.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id",
              "description": "The ID of the thread."
            },
            "name": "thread_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Thread"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "threads/manage"
        ],
        "summary": "Upsert Thread",
        "description": "Update a thread.",
        "operationId": "upsert_thread_threads__thread_id__put",
        "parameters": [
          {
            "description": "The ID of the thread.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id",
              "description": "The ID of the thread."
            },
            "name": "thread_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreadCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Thread"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "threads/manage"
        ],
        "summary": "Delete Thread",
        "description": "Delete a thread by ID.",
        "operationId": "delete_thread_threads__thread_id__delete",
        "parameters": [
          {
            "description": "The ID of the thread.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id",
              "description": "The ID of the thread."
            },
            "name": "thread_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/runs": {
      "get": {
        "tags": [
          "runs/manage"
        ],
        "summary": "List Runs Http",
        "description": "List all runs for a thread.",
        "operationId": "list_runs_http_threads__thread_id__runs_get",
        "parameters": [
          {
            "description": "The ID of the thread.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id",
              "description": "The ID of the thread."
            },
            "name": "thread_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Limit",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Run"
                  },
                  "type": "array",
                  "title": "Response List Runs Http Threads  Thread Id  Runs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "runs/create"
        ],
        "summary": "Create Run",
        "description": "Create a run.",
        "operationId": "create_run_threads__thread_id__runs_post",
        "parameters": [
          {
            "description": "The ID of the thread.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id",
              "description": "The ID of the thread."
            },
            "name": "thread_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Run"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/runs/stream": {
      "post": {
        "tags": [
          "runs/create"
        ],
        "summary": "Stream Run",
        "description": "Create a run.",
        "operationId": "stream_run_threads__thread_id__runs_stream_post",
        "parameters": [
          {
            "description": "The ID of the thread.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id",
              "description": "The ID of the thread."
            },
            "name": "thread_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunStream"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}": {
      "get": {
        "tags": [
          "runs/manage"
        ],
        "summary": "Get Run Http",
        "description": "Get a run by ID.",
        "operationId": "get_run_http_threads__thread_id__runs__run_id__get",
        "parameters": [
          {
            "description": "The ID of the thread.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id",
              "description": "The ID of the thread."
            },
            "name": "thread_id",
            "in": "path"
          },
          {
            "description": "The ID of the run.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id",
              "description": "The ID of the run."
            },
            "name": "run_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Run"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}/events": {
      "get": {
        "tags": [
          "runs/manage"
        ],
        "summary": "List Run Events Http",
        "description": "List all events for a run.",
        "operationId": "list_run_events_http_threads__thread_id__runs__run_id__events_get",
        "parameters": [
          {
            "description": "The ID of the thread.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id",
              "description": "The ID of the thread."
            },
            "name": "thread_id",
            "in": "path"
          },
          {
            "description": "The ID of the run.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id",
              "description": "The ID of the run."
            },
            "name": "run_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Limit",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RunEvent"
                  },
                  "type": "array",
                  "title": "Response List Run Events Http Threads  Thread Id  Runs  Run Id  Events Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Assistant": {
        "properties": {
          "assistant_id": {
            "type": "string",
            "title": "Assistant Id"
          },
          "graph_id": {
            "type": "string",
            "title": "Graph Id"
          },
          "config": {
            "$ref": "#/components/schemas/Config"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "assistant_id",
          "graph_id",
          "config",
          "created_at",
          "updated_at",
          "metadata"
        ],
        "title": "Assistant"
      },
      "AssistantCreate": {
        "properties": {
          "graph_id": {
            "type": "string",
            "title": "Graph Id",
            "description": "The graph to use."
          },
          "config": {
            "type": "object",
            "title": "Config",
            "description": "The assistant config."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata for the thread."
          }
        },
        "type": "object",
        "title": "AssistantCreate",
        "description": "Payload for creating an assistant."
      },
      "Config": {
        "properties": {
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "recursion_limit": {
            "type": "integer",
            "title": "Recursion Limit"
          },
          "configurable": {
            "type": "object",
            "title": "Configurable"
          }
        },
        "type": "object",
        "title": "Config"
      },
      "GraphSchema": {
        "properties": {
          "graph_id": {
            "type": "string",
            "title": "Graph Id"
          },
          "state_schema": {
            "type": "object",
            "title": "State Schema"
          },
          "config_schema": {
            "type": "object",
            "title": "Config Schema"
          }
        },
        "type": "object",
        "required": [
          "graph_id",
          "state_schema",
          "config_schema"
        ],
        "title": "GraphSchema"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Run": {
        "properties": {
          "run_id": {
            "type": "string",
            "title": "Run Id"
          },
          "thread_id": {
            "type": "string",
            "title": "Thread Id"
          },
          "assistant_id": {
            "type": "string",
            "title": "Assistant Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "running",
              "error",
              "success",
              "timeout",
              "interrupted"
            ],
            "title": "Status"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "run_id",
          "thread_id",
          "assistant_id",
          "created_at",
          "updated_at",
          "status",
          "metadata"
        ],
        "title": "Run"
      },
      "RunCreate": {
        "properties": {
          "assistant_id": {
            "type": "string",
            "title": "Assistant Id"
          },
          "input": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Input"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata for the run."
          },
          "config": {
            "$ref": "#/components/schemas/Config"
          },
          "webhook": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Webhook"
          },
          "interrupt_before": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "*"
                ]
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Interrupt Before"
          },
          "interrupt_after": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "*"
                ]
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Interrupt After"
          }
        },
        "type": "object",
        "required": [
          "assistant_id"
        ],
        "title": "RunCreate",
        "description": "Payload for creating a run."
      },
      "RunEvent": {
        "properties": {
          "event_id": {
            "type": "string",
            "title": "Event Id"
          },
          "run_id": {
            "type": "string",
            "title": "Run Id"
          },
          "received_at": {
            "type": "string",
            "format": "date-time",
            "title": "Received At"
          },
          "span_id": {
            "type": "string",
            "title": "Span Id"
          },
          "event": {
            "type": "string",
            "title": "Event"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "data": {
            "type": "object",
            "title": "Data"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "event_id",
          "run_id",
          "received_at",
          "span_id",
          "event",
          "name",
          "data",
          "metadata",
          "tags"
        ],
        "title": "RunEvent"
      },
      "RunStream": {
        "properties": {
          "assistant_id": {
            "type": "string",
            "title": "Assistant Id"
          },
          "input": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Input"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata for the run."
          },
          "config": {
            "$ref": "#/components/schemas/Config"
          },
          "webhook": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Webhook"
          },
          "interrupt_before": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "*"
                ]
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Interrupt Before"
          },
          "interrupt_after": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "*"
                ]
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Interrupt After"
          },
          "stream_mode": {
            "type": "string",
            "enum": [
              "values",
              "messages",
              "updates",
              "events",
              "debug"
            ],
            "title": "Stream Mode",
            "default": "values"
          }
        },
        "type": "object",
        "required": [
          "assistant_id"
        ],
        "title": "RunStream",
        "description": "Payload for creating a streaming run."
      },
      "SearchRequest": {
        "properties": {
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata to search for."
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "Maximum number to return.",
            "default": 10
          },
          "offset": {
            "type": "integer",
            "title": "Offset",
            "description": "Offset to start from.",
            "default": 0
          }
        },
        "type": "object",
        "title": "SearchRequest",
        "description": "Payload for listing assistants/threads/runs."
      },
      "Thread": {
        "properties": {
          "thread_id": {
            "type": "string",
            "title": "Thread Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "thread_id",
          "created_at",
          "updated_at",
          "metadata"
        ],
        "title": "Thread"
      },
      "ThreadCreate": {
        "properties": {
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata for the thread."
          }
        },
        "type": "object",
        "title": "ThreadCreate",
        "description": "Payload for creating a thread."
      },
      "ThreadState": {
        "properties": {
          "values": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Values"
          },
          "next": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Next"
          },
          "config": {
            "$ref": "#/components/schemas/Config"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "parent_config": {
            "$ref": "#/components/schemas/Config"
          }
        },
        "type": "object",
        "required": [
          "values",
          "next",
          "config",
          "metadata",
          "parent_config"
        ],
        "title": "ThreadState"
      },
      "ThreadStateUpdate": {
        "properties": {
          "values": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Values"
          },
          "config": {
            "$ref": "#/components/schemas/Config"
          }
        },
        "type": "object",
        "required": [
          "values"
        ],
        "title": "ThreadStateUpdate",
        "description": "Payload for adding state to a thread."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}
